% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/databaseKeyAdd.R
\name{databaseKeyAdd}
\alias{databaseKeyAdd}
\title{Database Key Management - Add Key}
\arguments{
\item{conn}{Connection to an existing (plain) database to be encrypted.}

\item{key}{A character string containing one of the following:
(i) a character string to be used as password. PBKDF2 is applied to generate
a key from the entered string, or
(ii) a character string of size 64, containing 32 hex encoded characters to
be used directly as key for database encryption, or
(iii) a character string of size 96, containing 32 hex encoded characters to
be used directly as key for database encryption and 16 hex encoded characters
to be used as salt.}

\item{file}{Optional, path to the new encrypted database. A temporary file
will be generated if not provided.}
}
\value{
A named list with True/False and the file name of the encrypted
database
}
\description{
Creates an encrypted copy of an existing database, using the provided key.
\emph{THIS FUNCTION MAY TAKE LONG FOR BIG DATABASE FILES}
}
\examples{
  key <- "0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF"
  tmp_file <- tempfile()
  con <- dbConnect(RSQLCipher::SQLCipher(), tmp_file)
  dbWriteTable(con, "mtcars", mtcars)

  newDB <- databaseKeyAdd(con, key)
  print(newDB)
  dbDisconnect(con)

  con2 <- dbConnect(RSQLCipher::SQLCipher(), newDB$file, key = key)
  dbListTables(con2)
  dbDisconnect(con2)

}
